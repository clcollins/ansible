# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

[ -z "$PS1" ] && return
PROMPT_COMMAND="git-prompt"
PS1="[\u@\h \W] \$ "

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions

du () {
  local args="$@"

  du $args | sort -h
}

# Create passwords
genpw () {
  if [[ "${args}" == "human" ]]
  then
    pwgen -cny 12
  elif [[ "${args}" == "mysql" ]]
  then
    pwgen -cns 16
  elif [[ "${args}" == "machine" ]]
  then
    pwgen -cnsy 16
  fi
}


hike () {
  # Run Ansible playbook
  if [[ -z ${1} ]]
  then
    echo "Usage: hike [PLAYBOOK.YML]"
    return 1
  fi

  local playbook="${1}.yml"
  local ans_dir='/home/chris/.ansible'

  pushd ${ans_dir} > /dev/null

  sudo ansible-playbook ${playbook}
  local retval=${?}

  popd > /dev/null

  return ${retval}
}


runhook () {
  local hook="${1:-}"
  local toplevel="$(git rev-parse --show-toplevel)"

  if [[ -z "${hook}" ]]
  then
    echo "No hook provided"
    return 1
  fi

  local hookbin=".git/hooks/${hook}"

  if [[ -f ${toplevel}/${hookbin} ]]
  then
     pushd ${toplevel} > /dev/null
     bash ${hookbin}
     local retval=${?}
     popd > /dev/null
  fi

  return ${retval}
}


testbuild () {

  sudo docker-compose run --rm --entrypoint bash test

}

taglast () {
  local repo='stevedore-repo.oit.duke.edu'

  if [[ -z ${1:-} ]]
  then
    echo "No image name specified"
    return 1
  else
    local image="${1}"
  fi

  sudo docker tag $(sudo docker images -q | head -n 1) ${repo}/${image}

  return $?
}

cc0 () {

	curl https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt > LICENSE \
	&& if git status >> /dev/null 2>&1 
	   then
	     git add LICENSE \
	   	&& git commit --amend --no-edit \
	   	&& git push -f
	   fi
}

# Check for tmux; make sure we're not in screen,
# and then replace the bash shell with tmux
#if command -v tmux>/dev/null
#then
#  [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
#fi

# Some fun git aliases
git-rm-secret () {
  local secret_file="${1}"
  git filter-branch \
      --force \
      --index-filter "git rm --cached --ignore-unmatch ${secret_file}" \
      --prune-empty \
      --tag-name-filter cat -- \
      --all

  echo "Don't forget to run: `git push origin --force --all`"
  echo '...and perhaps we should add the sensitive file to our .gitignore, should we not?'
}

LOLCOMMITS_ENABLE="lolcommits --enable --animate 2 --delay 1 --fork --stealth"

git () {
  if [[ $@ == "init" ]] && lolcommits --version > /dev/null
  then
    command git init && ${LOLCOMMITS_ENABLE}
  elif [[ $@ == "init" ]] && ! lolcommits -v > /dev/null
  then
    echo "lolcommits not found"
    return 1
  elif [[ $@ == "pish" ]]
  then
    echo "I think you've had enough...  Did you mean 'push'?"
    return 1
  elif [[ $@ == "log" ]]
  then
    command git log \
                --graph \
                --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
                --abbrev-commit
  else
    command git "$@"
  fi
}

lolcommits_enable () {
  if ! lolcommits --version > /dev/null
  then
    echo "lolcommits not found"
    return 1
  else
    command ${LOLCOMMITS_ENABLE}
  fi
}

DOGE="
                   ▄              ▄
                  ▌▒█           ▄▀▒▌
    such commit   ▌▒▒█        ▄▀▒▒▒▐   very branch
                 ▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐
               ▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐
             ▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌
            ▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌
            ▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐
           ▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌      so git
           ▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌
          ▌▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒▐
          ▐▒▒▐▀▐▀▒░▄▄▒▄▒▒▒▒▒▒░▒░▒░▒▒▒▒▌
          ▐▒▒▒▀▀▄▄▒▒▒▄▒▒▒▒▒▒▒▒░▒░▒░▒▒▐
           ▌▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒░▒░▒░▒░▒▒▒▌
 very code ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒░▒░▒▒▄▒▒▐
            ▀▄▒▒▒▒▒▒▒▒▒▒▒░▒░▒░▒▄▒▒▒▒▌    wow
              ▀▄▒▒▒▒▒▒▒▒▒▒▄▄▄▀▒▒▒▒▄▀
                ▀▄▄▄▄▄▄▀▀▀▒▒▒▒▒▄▄▀
                   ▒▒▒▒▒▒▒▒▒▒▀▀
"

alias such=git
alias very=git
alias wow='echo -e "\e[7m${DOGE}\e[0m" ; git status'

# Setup ssh stuffs
agent_007 () {
  local key="${HOME}/.ssh/id_ed25519"
  eval $(ssh-agent) \
  && ssh-add $key
}

pubnet () {
  dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}'
}

rekey () {
  if [[ $1 == "--rsa" ]]
  then
    local key="${HOME}/.ssh/id_rsa"
  else
    local key="${HOME}/.ssh/id_ed25519"
  fi

  if [[ -f ${key} ]]
  then
    mv ${key} ${key}-DISABLED
  elif [[ -f ${key}-DISABLED ]]
  then
    mv ${key}-DISABLED ${key}
  else
    echo "Something is weird... fix me."
  fi
}

# Stuff for buildah

buildah () {
  if [[ $@ == "cleanall" ]]
  then
    echo "Removing all buildah containers and images"
    sudo buildah images -q \
                        --noheading \
                        --notruncate \
    && sudo buildah images -q \
                           --noheading \
                           --notruncate \
                           | xargs sudo buildah rmi -f
  else
    command buildah "$@"
  fi
}

# Things for ruby
export PATH="$PATH:$HOME/.rbenv/bin"
export PATH="$PATH:$HOME/.rbenv/plugins/ruby-build/bin"
eval "$(rbenv init -)"
