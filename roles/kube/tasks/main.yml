---

# Generic host configuration

- name: install common packages 
  package:
    name: 
      - "{{ item }}"
    state: present
  with_items:
    - "{{ general_packages[ansible_distribution] }}"
  become: true
  tags:
    - packages

- name: set iptables-legacy for iptables integration
  community.general.alternatives:
    name: iptables
    path: /usr/sbin/iptables-legacy
    link: /usr/sbin/iptables
  become: true
  tags:
    - networking
    - iptables

- name: disable services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
    masked: yes
  with_items:
    - "{{ disabled_services[ansible_distribution] }}"
  become: true
  tags:
    - networking
    - firewalld
    - systemd_resolved
    - systemd

- name: check resolve.conf
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: resolve_conf
  tags:
    - networking
    - resolve_conf

- name: remove resolve.conf if it is a link
  ansible.builtin.file:
    path: /etc/resolve.conf
    state: absent
  when:
    - resolve_conf.stat.islnk is defined
    - resolve_conf.stat.islnk
  register: resolve_conf_deleted
  become: true
  tags:
    - networking
    - resolve_conf
  notify: Restart NetworkManager

- name: disable resolve.conf
  ansible.builtin.file:
    path: /etc/resolve.conf
    state: touch
    owner: root
    group: root
    mode: '0644'
  when:
    - resolv_conf_disabled is defined
  become: true
  tags:
    - networking
    - resolve_conf
  notify: Restart NetworkManager

- name: set NetworkManager dns config
  community.general.ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    section: main
    option: dns
    value: default
  become: true
  tags:
    - networking
    - networkManager
    - resolve_conf
  notify: Restart NetworkManager

- name: load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ kernel_modules[ansible_distribution] }}"
  become: true
  tags:
    - kernel_modules
    - cri-o

- name: enable persistent kernel modules
  copy:
    dest: "/etc/modules-load.d/{{ item }}"
    content: |
      # Load {{ item }} at boot time
      {{ item }}
  with_items:
    - "{{ kernel_modules[ansible_distribution] }}"
  become: true
  tags:
    - kernel_modules
    - cri-o

- name: check zram-generator.conf
  ansible.builtin.stat:
    path: /etc/systemd/zram-generator.conf
  register: zram_generator_conf
  tags:
    - swap

- name: disable swap
  ansible.builtin.file:
    path: /etc/systemd/zram-generator.conf 
    state: touch
    owner: root
    group: root
    mode: '0644'
  when:
    - zram_generator_conf.stat.exists is defined
    - not zram_generator_conf.stat.exists
  become: true
  tags:
    - swap

- name: add control plane hostname to hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item].ansible_host }} {{ item }} {{ control_plane_dns_name }}"
    state: present
  when: hostvars[item].ansible_host is defined
  with_items: "{{ groups.kubePrimary }}"
  become: True
  tags:
    - etc_hosts
 
# Container runtime and kubelet configuration

- name: CRI-O sysctl entries
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - "{{ crio_sysctl_configs }}"
  become: true
  tags:
    - sysctl_entires
    - networking
    - cri-o

- name: add repo keys (apt)
  apt_key:
    url: "{{ item.key }}"
    state: present
  with_items:
    - "{{ crio_repos[ansible_distribution] }}"
    - "{{ kube_repos[ansible_distribution] }}"
  become: true
  when: 
    - ansible_facts['distribution'] == "Ubuntu"
  tags:
    - apt
    - repos
    - cri-o
    - kubernetes

- name: add repos (apt)
  apt_repository:
    repo: "{{ item.name }}"
    state: present
  with_items:
    - "{{ crio_repos[ansible_distribution] }}"
    - "{{ kube_repos[ansible_distribution] }}"
  when:
    - ansible_facts['distribution'] == "Ubuntu"
  become: true
  tags:
    - apt
    - repos 
    - cri-o
    - kubernetes

- name: add repos (dnf)
  copy:
    dest: "{{ item.destination }}"
    content: "{{ item.content }}"
  when:
    - ansible_facts['distribution'] == "Fedora"
  with_items:
    - "{{ crio_repos[ansible_distribution] }}"
  become: true
  tags:
    - dnf
    - repos
    - cri-o

- name: add packages (dpkg)
  package:
    name: 
      - "{{ item }}"
    state: present
  with_items:
      - "{{ crio_packages[ansible_distribution] }}"
      - "{{ kube_packages[ansible_distribution] }}"
  become: true
  when:
    - ansible_facts['distribution'] == "Ubuntu"
  tags:
    - packages
    - cri-o
    - kubernetes

- name: add packages (dnf)
  dnf:
    name: 
      - "{{ item }}"
    state: present
  with_items:
      - "{{ crio_packages[ansible_distribution] }}"
      - "{{ kube_packages[ansible_distribution] }}"
  become: true
  when:
    - ansible_facts['distribution'] == "Fedora"
  tags:
    - packages
    - cri-o

- name: hold Kube and Crio packages (dpkg)
  dpkg_selections:
    name:
      - "{{ crio_packages }}"
      - "{{ kube_packages }}"
    selection: hold
  become: true
  when:
    - ansible_facts['distribution'] == "Ubuntu"
  tags:
    - dpkg
    - packages
    - cri-o
    - kubernetes

- name: enable service cri-o and ensure it is not masked
  systemd:
    name: "{{ crio_service[ansible_distribution] }}"
    state: started
    enabled: yes
    masked: no
  become: true
  tags:
    - systemd
    - cri-o

- name: ensure kubelet.service.d exists
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory
  become: true
  tags:
    - kubernetes
    - systemd

- name: temporary fail
  ansible.builtin.fail:
    msg: STOP HERE
    
- name: ensure systemd cgroups driver
  copy:
    src: 10-kubeadm.conf
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  become: true
  tags:
    - kubernetes
    - systemd
  register: kubelet_service

- name: reload and restart kubelet
  systemd:
    name: "{{ kubelet_service[ansible_distribution] }}"
    state: restarted
    enabled: yes
    masked: no
  become: true
  tags:
    - systemd
    - cri-o
  when: kubelet_service.changed|bool

